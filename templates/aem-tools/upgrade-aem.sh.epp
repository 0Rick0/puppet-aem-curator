#!/usr/bin/env bash
set -o nounset
set -o errexit

if [ "$#" -ne 2 ]; then
  echo 'Usage: ./upgrade-aem-script.sh <aem_upgrade_version> <post_upgrade_sleep_secs>'
  exit 1
fi

PATH=<%= $aem_tools_env_path %>

# translate puppet exit code to follow convention
translate_puppet_exit_code() {

  exit_code="$1"
  if [ "$exit_code" -eq 0 ] || [ "$exit_code" -eq 2 ]; then
    exit_code=0
  else
    exit "$exit_code"
  fi

  return "$exit_code"
}

translate_exit_code() {

  exit_code="$1"
  if [ "$exit_code" -eq 0 ]; then
    exit_code=0
  else
    exit "$exit_code"
  fi

  return "$exit_code"
}


set +o errexit

aem_upgrade_version=$1
post_upgrade_sleep_secs=$2

<% $aem_instances.each | Integer $index, Hash $aem_instance | { -%>

cd <%= $base_dir %>/aem-aws-stack-provisioner/

FACTER_aem_id=<%= $aem_instance['aem_id'] %> \
  FACTER_aem_port=<%= $aem_instance['aem_port'] %> \
  FACTER_aem_upgrade_version=${aem_upgrade_version} \
  FACTER_post_upgrade_sleep_secs=${post_upgrade_sleep_secs} \
  /opt/puppetlabs/bin/puppet apply \
    --debug \
    --detailed-exitcodes \
    --modulepath modules \
    --hiera_config conf/hiera.yaml \
    --execute "include aem_curator::action_upgrade_aem"

translate_puppet_exit_code "$?"

echo "Testing if AEM  Upgrade for <%= $aem_instance['aem_id'] %> was successful using InSpec..."
cd "<%= $base_dir %>/aem-tools/test/inspec/inspec-aem"
HOME=/root \
  inspec exec . --controls aem-${aem_upgrade_version}.0-version-installed

translate_exit_code "$?"

<% } -%>
